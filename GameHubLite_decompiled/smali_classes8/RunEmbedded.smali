.class public final LRunEmbedded;
.super Ljava/lang/Object;
.source "SourceFile"


# static fields
.field public static final a:LRunEmbedded;

.field public static final b:Lkotlin/Lazy;


# direct methods
.method static constructor <clinit>()V
    .locals 1

    new-instance v0, LRunEmbedded;

    invoke-direct {v0}, LRunEmbedded;-><init>()V

    sput-object v0, LRunEmbedded;->a:LRunEmbedded;

    new-instance v0, La;

    invoke-direct {v0}, La;-><init>()V

    invoke-static {v0}, Lkotlin/LazyKt;->b(Lkotlin/jvm/functions/Function0;)Lkotlin/Lazy;

    move-result-object v0

    sput-object v0, LRunEmbedded;->b:Lkotlin/Lazy;

    return-void
.end method

.method public constructor <init>()V
    .locals 0

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method public static synthetic a()[B
    .locals 1

    invoke-static {}, LRunEmbedded;->c()[B

    move-result-object v0

    return-object v0
.end method

.method public static final c()[B
    .locals 2

    invoke-static {}, Ljava/util/Base64;->getDecoder()Ljava/util/Base64$Decoder;

    move-result-object v0

    const-string v1, ""

    invoke-virtual {v0, v1}, Ljava/util/Base64$Decoder;->decode(Ljava/lang/String;)[B

    move-result-object v0

    return-object v0
.end method


# virtual methods
.method public final b()[B
    .locals 2

    sget-object v0, LRunEmbedded;->b:Lkotlin/Lazy;

    invoke-interface {v0}, Lkotlin/Lazy;->getValue()Ljava/lang/Object;

    move-result-object v0

    const-string v1, "getValue(...)"

    invoke-static {v0, v1}, Lkotlin/jvm/internal/Intrinsics;->f(Ljava/lang/Object;Ljava/lang/String;)V

    check-cast v0, [B

    return-object v0
.end method
